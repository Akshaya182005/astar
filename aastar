from collections import deque, defaultdict

class Graph:
    def _init_(self, adjacency_list):
        self.adjacency_list = adjacency_list

    def get_neighbors(self, v):
        return self.adjacency_list[v]

    def h(self, n):
        # Heuristic function: For simplicity, we assume heuristic = 1 for each node by default
        H = defaultdict(lambda: 1)
        return H[n]

    def a_star_algorithm(self, start_node, stop_node):
        open_list = set([start_node])
        closed_list = set([])
        g = {start_node: 0}
        parents = {start_node: start_node}

        while len(open_list) > 0:
            n = None

            for v in open_list:
                if n is None or g[v] + self.h(v) < g[n] + self.h(n):
                    n = v

            if n is None:
                print('Path does not exist!')
                return None

            if n == stop_node:
                reconst_path = []

                while parents[n] != n:
                    reconst_path.append(n)
                    n = parents[n]

                reconst_path.append(start_node)
                reconst_path.reverse()

                print('Path found: {}'.format(reconst_path))
                return reconst_path

            for (m, weight) in self.get_neighbors(n):
                if m not in open_list and m not in closed_list:
                    open_list.add(m)
                    parents[m] = n
                    g[m] = g[n] + weight
                else:
                    if g[m] > g[n] + weight:
                        g[m] = g[n] + weight
                        parents[m] = n
                        if m in closed_list:
                            closed_list.remove(m)
                            open_list.add(m)

            open_list.remove(n)
            closed_list.add(n)

        print('Path does not exist!')
        return None

# Get user input for the adjacency list
def get_adjacency_list():
    adjacency_list = {}
    num_nodes = int(input("Enter the number of nodes: "))

    for _ in range(num_nodes):
        node = input("Enter node: ")
        neighbors = []
        num_neighbors = int(input(f"Enter number of neighbors for {node}: "))

        for _ in range(num_neighbors):
            neighbor = input("Enter neighbor node: ")
            weight = int(input(f"Enter weight for edge {node} -> {neighbor}: "))
            neighbors.append((neighbor, weight))

        adjacency_list[node] = neighbors

    return adjacency_list

# Main code to execute the algorithm
if _name_ == "_main_":
    adjacency_list = get_adjacency_list()
    start_node = input("Enter the start node: ")
    stop_node = input("Enter the stop node: ")

    graph = Graph(adjacency_list)
    graph.a_star_algorithm(start_node, stop_node)
